<<<<<<< HEAD
install.packages("readxl")
install.packages("ggplot2")
source('~/Documents/TDDE01/lab4/assignment1/script.r')
source('~/Documents/TDDE01/lab4/assignment1/script.r')
source('~/Documents/TDDE01/lab4/assignment1/script.r')
source('~/Documents/TDDE01/lab4/assignment1/script.r')

install.package("rmarkdown")
install.packages("rmarkdown")
source('~/Documents/Quake2D/core/assets/plotter.r')
setwd("~/Documents/Quake2D/core/assets")
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
View(data2)
View(data)
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
warnings()
source('~/Documents/Quake2D/core/assets/plotter.r')
warnings()
source('~/Documents/Quake2D/core/assets/plotter.r')
View(data)
source('~/Documents/Quake2D/core/assets/plotter.r')
View(data)
source('~/Documents/Quake2D/core/assets/plotter.r')
data$Fitness
source('~/Documents/Quake2D/core/assets/plotter.r')
data
data$Fitness
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
summary(data)
as.numeric(frame$Fitness)
as.numeric(frame$Generation)
show(frame)
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
frame$Fitness <- as.numeric(frame$Fitness)
frame$Fitness <- as.numeric(frame$Fitness)
source('~/Documents/Quake2D/core/assets/plotter.r')
frame$Fitness <- as.numeric(frame$Fitness)
frame$Generation = as.numeric(frame$Generation)
View(frame)
summary(frame)
data2
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
frame
frame[Generation == 'NA']
frame[Generation == NA]
View(frame)
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
source('~/Documents/Quake2D/core/assets/plotter.r')
=======
runif
help("runif)")
help("runif")
tanh
tanh(1)
tr''
tr
tr
nr_hidden = 1
knitr::opts_chunk$set(echo = TRUE)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = run((nr_input+1)*nr_hidden,0,1)
View(va)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = run((nr_input+1)*nr_hidden,0,1)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
forward(tr$Var,weights_h,weights_o)
View(tr)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
ones
matrix(1,nrow(tr))
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(input),ncol(input))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
matrix(1,nrow(tr)nrow(input))
nrow(input)
nrow(tr)
ncol(tr)
nrow(tr$Var)
nrow(tr$Var[:,])
nrow(tr$Var[:])
nrow(tr$Var[,])
nrow(tr$Var)
tr$Var
nrow(as.matrix(tr$Var))
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(input))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
nrow(as.matrix(input))
nrow(as.matrix(input))nrow(as.matrix(tr$Var))
nrow(as.matrix(tr$Var))
nrow(as.matrix(tr$Var))[1]
nrow(as.matrix(tr$Var))[]
nrow(as.matrix(tr$Var))
nrow(as.matrix(tr$Var))[[1]]
nrow(as.matrix(tr$Var))[[2]]
nrow(as.matrix(tr$Var))[2
]
nrow(as.matrix(tr$Var))
ncol(tr$car)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,1)
weights_o = runif((nr_hidden+1)*nr_output,0,1)
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
input = tr$Var
matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
input * weights_h
input * weights_h
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,nrow(tr))
weights_o = runif((nr_hidden+1)*nr_output,0,nrow(tr))
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = runif((nr_input+1)*nr_hidden,0,nrow(tr))
weights_o = runif((nr_hidden+1)*nr_output,0,nrow(tr))
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
help(runif)
runif(1,2,0,1)
runif([1,2],0,1)
runif(1:2,0,1)
runif(1:10,0,1)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = matrix(runif(1,0,1),(1+nr_input)*nr_hidden,nrow(tr))
weights_o = matrix(runif(1,0,1),(1+nr_hidden)*nr_output,nrow(tr))
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
runif(1:10,0,1)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = matrix(runif(1,0,1),(1+nr_input)*nr_hidden,nrow(tr))
weights_o = matrix(runif(1,0,1),(1+nr_hidden)*nr_output,nrow(tr))
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
matrix(runif(1,0,1),(1+nr_input)*nr_hidden,nrow(tr))
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = matrix(runif(1,0,1),nrow(tr),(1+nr_input)*nr_hidden)
weights_o = matrix(runif(1,0,1),nrow(tr),(1+nr_hidden)*nr_output)
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
v = matrix(runif(1,0,1),nrow(tr),(1+nr_input)*nr_hidden)
View(v)
nr_hidden = 10
nr_output = 1
nr_input = 1
set.seed(123456)
Var = runif(50,0,10)
trva = data.frame(Var, Sin=sin(Var))
tr = trva[1:25,]
va = trva[26:50,]
weights_h = matrix(runif(1,0,1),nrow(tr),nr_input*nr_hidden+1)
weights_o = matrix(runif(1,0,1),nrow(tr),+nr_hidden*nr_output+1)
forward = function(input, weights_h, weights_o) {
u = matrix(1,1 + nrow(as.matrix(input)),ncol(as.matrix(input)))
u[-1,] = tanh(input * weights_h)
y = tanh(u*weights_o)
return(y);
}
result = forward(tr$Var,weights_h,weights_o)
v = matrix(runif(1,0,1),nrow(tr),nr_input*nr_hidden+1)
View(v)
tr$Var * v
matrix(1,nrow(as.matrix(input)),nr_hidden)
input = tr$Var
matrix(1,nrow(as.matrix(input)),nr_hidden)
a = [1,2;3,4]
a
a = as.matrix(1:2,2,2)
a
a = as.matrix(1:4,2,2)
a
a = as.matrix(1:4,2,4)
a
a = as.matrix(c(1,2),2,2)
a
a = matrix[1,2]
matrix
matrix(1,2)
matrix(1:2,2)
matrix(1:2,2,2)
matrix(1:4,2,2)
matrix(1:4,4,4)
matrix(1:4,4,4) * matrix(2,4,4)
a = matrix(1,1,5)
a
b = matrix(2,5,5)
b
cbin(a,b)
cbind(a,b)
rbin(a,b)
rbind(a,b)
b[1,] = 1
b
b
a = matrix(1,5,10)
b = matrix(2,2,10)
a*b
a*solve(b)
a*b''
a''
a'
q
d
''
* t(b)
a * t(b)
a .* b
a .* t(b)
a
a %*% b
a %*% t(b)
x = c(-1,5)
y = c(-1,5)
x * t(y)
x * y
x .* y
x =
asd
x
y
x = data()
setwd("~/Git/Quake2D/core/assets")
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
aggregate(frame$Victory, by=list(frame$Generation), fun=sum)
aggregate(frame$Victory, by=list(frame$Generation), FUN=sum)
aggregate(frame$Victory, by=list(frame$Generation), FUN=sum)[2]
plot(aggregate(frame$Victory, by=list(frame$Generation), FUN=sum))
lines(aggregate(frame$Victory, by=list(frame$Generation), FUN=sum))
line(aggregate(frame$Victory, by=list(frame$Generation), FUN=sum))
boxplot(aggregate(frame$Victory, by=list(frame$Generation), FUN=sum))
hist
hist(x = frame$Generation)
source('~/Git/Quake2D/core/assets/plotter.r')
source('~/Git/Quake2D/core/assets/plotter.r')
>>>>>>> 29fe86e263f81dfb6a39686c29d518d3433cc02c
